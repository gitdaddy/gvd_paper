\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{section.1}}
\newlabel{sec:intro}{{1}{1}{Introduction}{section.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Related work}{1}{section.2}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Sweepline Algorithm}{1}{section.3}}
\newlabel{sec:sweepline-algorithm}{{3}{1}{Sweepline Algorithm}{section.3}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Conclusions}{1}{section.4}}
\@writefile{loa}{\contentsline {algocf}{\numberline {1}{\ignorespaces Sweepline Algorithm\relax }}{2}{algocf.1}}
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{alg:sweepline-algorithm}{{1}{2}{Sweepline Algorithm}{algocf.1}{}}
\newlabel{fig:sweepA}{{1a}{2}{Subfigure 1a}{subfigure.1.1}{}}
\newlabel{sub@fig:sweepA}{{(a)}{a}{Subfigure 1a\relax }{subfigure.1.1}{}}
\newlabel{fig:sweepB}{{1b}{2}{Subfigure 1b}{subfigure.1.2}{}}
\newlabel{sub@fig:sweepB}{{(b)}{b}{Subfigure 1b\relax }{subfigure.1.2}{}}
\newlabel{fig:sweepC}{{1c}{2}{Subfigure 1c}{subfigure.1.3}{}}
\newlabel{sub@fig:sweepC}{{(c)}{c}{Subfigure 1c\relax }{subfigure.1.3}{}}
\newlabel{fig:sweepD}{{1d}{2}{Subfigure 1d}{subfigure.1.4}{}}
\newlabel{sub@fig:sweepD}{{(d)}{d}{Subfigure 1d\relax }{subfigure.1.4}{}}
\newlabel{fig:sweepE}{{1e}{2}{Subfigure 1e}{subfigure.1.5}{}}
\newlabel{sub@fig:sweepE}{{(e)}{e}{Subfigure 1e\relax }{subfigure.1.5}{}}
\newlabel{fig:sweepF}{{1f}{2}{Subfigure 1f}{subfigure.1.6}{}}
\newlabel{sub@fig:sweepF}{{(f)}{f}{Subfigure 1f\relax }{subfigure.1.6}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Sweepline Algorithm \subref {fig:sweepA} Here the algorithm has processed the first two events and multiple arc nodes have been added to the beach line, in which the leaf nodes represent active sites and the parent nodes are edge connections (as shown in \subref {fig:sweepD}). It is important to note the beach line includes the edge connection 2-3 even though it is not shown here. The line created by this connection is the same as that made by 1-2. \subref {fig:sweepB} Once the algorithm is able to triangulate a close event, it removes the arc node that formed it. This is illustrated in \subref {fig:sweepE} where there is no longer an edge connection between 1-2 or 4-1. \subref {fig:sweepC} When a site is enclosed completely by vertexes it is removed entirely from the beach line (as shown in \subref {fig:sweepF}). \relax }}{2}{figure.caption.2}}
\newlabel{fig:sweepline}{{1}{2}{Sweepline Algorithm \protect \subref {fig:sweepA} Here the algorithm has processed the first two events and multiple arc nodes have been added to the beach line, in which the leaf nodes represent active sites and the parent nodes are edge connections (as shown in \protect \subref {fig:sweepD}). It is important to note the beach line includes the edge connection 2-3 even though it is not shown here. The line created by this connection is the same as that made by 1-2. \protect \subref {fig:sweepB} Once the algorithm is able to triangulate a close event, it removes the arc node that formed it. This is illustrated in \protect \subref {fig:sweepE} where there is no longer an edge connection between 1-2 or 4-1. \protect \subref {fig:sweepC} When a site is enclosed completely by vertexes it is removed entirely from the beach line (as shown in \protect \subref {fig:sweepF}). \relax }{figure.caption.2}{}}
\newlabel{fig:live_event}{{2a}{3}{Subfigure 2a}{subfigure.2.1}{}}
\newlabel{sub@fig:live_event}{{(a)}{a}{Subfigure 2a\relax }{subfigure.2.1}{}}
\newlabel{fig:live_event_tree}{{2b}{3}{Subfigure 2b}{subfigure.2.2}{}}
\newlabel{sub@fig:live_event_tree}{{(b)}{b}{Subfigure 2b\relax }{subfigure.2.2}{}}
\newlabel{fig:non_live}{{2c}{3}{Subfigure 2c}{subfigure.2.3}{}}
\newlabel{sub@fig:non_live}{{(c)}{c}{Subfigure 2c\relax }{subfigure.2.3}{}}
\newlabel{fig:non_live_tree}{{2d}{3}{Subfigure 2d}{subfigure.2.4}{}}
\newlabel{sub@fig:non_live_tree}{{(d)}{d}{Subfigure 2d\relax }{subfigure.2.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Illustration of live and non-live close events \subref {fig:live_event} Here lets examine nodes 16 and 11. It is known that a close event will occur where nodes 16, 11, and 10 arcs' will meet. Let's name this close event A. \subref {fig:live_event_tree} Before we completely come to close on event A, node 22 gets added to the beach line and generates two new events. This causes close event A to split into two new close events and therefore is considered a non-live close event. \relax }}{3}{figure.caption.3}}
\newlabel{fig:live_events}{{2}{3}{Illustration of live and non-live close events \protect \subref {fig:live_event} Here lets examine nodes 16 and 11. It is known that a close event will occur where nodes 16, 11, and 10 arcs' will meet. Let's name this close event A. \protect \subref {fig:live_event_tree} Before we completely come to close on event A, node 22 gets added to the beach line and generates two new events. This causes close event A to split into two new close events and therefore is considered a non-live close event. \relax }{figure.caption.3}{}}
\newlabel{fig:close_eventA}{{3a}{3}{Subfigure 3a}{subfigure.3.1}{}}
\newlabel{sub@fig:close_eventA}{{(a)}{a}{Subfigure 3a\relax }{subfigure.3.1}{}}
\newlabel{fig:close_eventB}{{3b}{3}{Subfigure 3b}{subfigure.3.2}{}}
\newlabel{sub@fig:close_eventB}{{(b)}{b}{Subfigure 3b\relax }{subfigure.3.2}{}}
\newlabel{fig:close_eventC}{{3c}{3}{Subfigure 3c}{subfigure.3.3}{}}
\newlabel{sub@fig:close_eventC}{{(c)}{c}{Subfigure 3c\relax }{subfigure.3.3}{}}
\newlabel{fig:close_eventD}{{3d}{3}{Subfigure 3d}{subfigure.3.4}{}}
\newlabel{sub@fig:close_eventD}{{(d)}{d}{Subfigure 3d\relax }{subfigure.3.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Illustration of close event generated from a close event \subref {fig:close_eventA} Lets note the close event generated from node 10 closing with nodes 11 and 4. Lets name this close event B. \subref {fig:close_eventB} Once event B is defined node 10 no longer creates an arc with node 11 and is removed. In this removal node 10's arc now maps to node 4's arc instead. As this happens a new close event is generated by arcs from nodes 11, 4 and 6. \relax }}{3}{figure.caption.4}}
\newlabel{fig:close_events}{{3}{3}{Illustration of close event generated from a close event \protect \subref {fig:close_eventA} Lets note the close event generated from node 10 closing with nodes 11 and 4. Lets name this close event B. \protect \subref {fig:close_eventB} Once event B is defined node 10 no longer creates an arc with node 11 and is removed. In this removal node 10's arc now maps to node 4's arc instead. As this happens a new close event is generated by arcs from nodes 11, 4 and 6. \relax }{figure.caption.4}{}}
\newlabel{fig:gvd1}{{4a}{4}{Subfigure 4a}{subfigure.4.1}{}}
\newlabel{sub@fig:gvd1}{{(a)}{a}{Subfigure 4a\relax }{subfigure.4.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Generalized Sites \subref {fig:gvd1} The exact Generalized Voronoi Diagram(GVD) is produced as sweep-line processes generalized sites. The algorithm supports any number of simple polygons as long as they are not overlapping. Each polygon is made up of a number of connected points. The GVD algorithm computes the appropriate bisector between sites. The bisector represents the continuous parabola or line that separates sites. If a point lies at the end of a segment the bisector is a line perpendicular to the segment intersecting that point; otherwise, the bisector between a point site and a segment site is a parabola representing the bisector of the two sites. With a pair of segments their bisector can include up to 2 lines if the intersection of the two segments lies between the endpoints of one segment. In all other cases the bisector of two segments can be represented with a single line. \relax }}{4}{figure.caption.5}}
\newlabel{fig:gvd}{{4}{4}{Generalized Sites \protect \subref {fig:gvd1} The exact Generalized Voronoi Diagram(GVD) is produced as sweep-line processes generalized sites. The algorithm supports any number of simple polygons as long as they are not overlapping. Each polygon is made up of a number of connected points. The GVD algorithm computes the appropriate bisector between sites. The bisector represents the continuous parabola or line that separates sites. If a point lies at the end of a segment the bisector is a line perpendicular to the segment intersecting that point; otherwise, the bisector between a point site and a segment site is a parabola representing the bisector of the two sites. With a pair of segments their bisector can include up to 2 lines if the intersection of the two segments lies between the endpoints of one segment. In all other cases the bisector of two segments can be represented with a single line. \relax }{figure.caption.5}{}}
\newlabel{fig:gvd2}{{5a}{4}{Subfigure 5a}{subfigure.5.1}{}}
\newlabel{sub@fig:gvd2}{{(a)}{a}{Subfigure 5a\relax }{subfigure.5.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Special Cases \subref {fig:gvd2} Special cases such as parallel sites are handled as the algorithm computes the correct bisector between each site. Between a pair of segments we use their intersection to find the bisector, however, when the segments are parallel there is no intersection and we use the average of the segments to determine the bisector. Finding the correct bisector enables the algorithm to determine future close events. \relax }}{4}{figure.caption.6}}
\newlabel{fig:gvd}{{5}{4}{Special Cases \protect \subref {fig:gvd2} Special cases such as parallel sites are handled as the algorithm computes the correct bisector between each site. Between a pair of segments we use their intersection to find the bisector, however, when the segments are parallel there is no intersection and we use the average of the segments to determine the bisector. Finding the correct bisector enables the algorithm to determine future close events. \relax }{figure.caption.6}{}}
